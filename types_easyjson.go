// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeTmpEasyjson(in *jlexer.Lexer, out *BasicSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "denied_annotations":
			if in.IsNull() {
				in.Skip()
				out.DeniedAnnotations = nil
			} else {
				in.Delim('[')
				if out.DeniedAnnotations == nil {
					if !in.IsDelim(']') {
						out.DeniedAnnotations = make([]string, 0, 4)
					} else {
						out.DeniedAnnotations = []string{}
					}
				} else {
					out.DeniedAnnotations = (out.DeniedAnnotations)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.DeniedAnnotations = append(out.DeniedAnnotations, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mandatory_annotations":
			if in.IsNull() {
				in.Skip()
				out.MandatoryAnnotations = nil
			} else {
				in.Delim('[')
				if out.MandatoryAnnotations == nil {
					if !in.IsDelim(']') {
						out.MandatoryAnnotations = make([]string, 0, 4)
					} else {
						out.MandatoryAnnotations = []string{}
					}
				} else {
					out.MandatoryAnnotations = (out.MandatoryAnnotations)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.MandatoryAnnotations = append(out.MandatoryAnnotations, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "constrained_annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ConstrainedAnnotations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.ConstrainedAnnotations)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson(out *jwriter.Writer, in BasicSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"denied_annotations\":"
		out.RawString(prefix[1:])
		if in.DeniedAnnotations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.DeniedAnnotations {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mandatory_annotations\":"
		out.RawString(prefix)
		if in.MandatoryAnnotations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.MandatoryAnnotations {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"constrained_annotations\":"
		out.RawString(prefix)
		if in.ConstrainedAnnotations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.ConstrainedAnnotations {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BasicSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BasicSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BasicSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BasicSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson(l, v)
}
